{"version":3,"sources":["game/constants.ts","game/card.ts","game/hand.ts","game/emissions-line.ts","game/gamestate.ts","game/event.ts","cards.ts","canvas/card-sprite.ts","canvas/shader.vert.ts","canvas/shader.frag.ts","canvas/canvas.ts","game/mouse.ts","ui/Menu.tsx","ui/StatusBar.tsx","devtools/console.ts","App.tsx","index.tsx"],"names":["HAND_POSITION","HEIGHT","OPPONENT_HAND_POSITION","HAND_CARD_ANGLE","Math","PI","EMISSIONS_LINE_POSITION","DECK_POSITION","WIDTH","DISCARD_PILE_POSITION","Card","id","name","container","position","scale","DEFAULT_SCALE","rotation","addedRotation","zLevel","isSpace","visible","flipped","this","card","width","DEFAULT_WIDTH","height","DEFAULT_HEIGHT","goal","timePassed","newCard","undefined","transpose","from","to","fraction","SpaceCard","Hand","state","i","n","cards","filter","c","length","map","angle","x","sin","y","cos","GameState","getFocusedCardID","HAND_Y_RADIUS","OpponentHand","EmissionsLine","elCards","emissionsLineCardOrder","reduce","cardID","find","Error","cardCount","cardWidth","startOffset","selectedCardID","selectedCard","updateCards","push","slice","elCardOrder","missingSpaceCards","spaceCards","findIndex","isMyTurn","socketID","hoveredCardIDs","Set","statusMessage","Array","event","focusedCardID","rearrange","serverCard","payload","updated","updatedCard","events","currentTime","Date","now","timestamp","event_type","server_card","add","playedCard","movedCard","incorrectCardPlacement","nextCard","card_id","delete","mouseClicked","EventBuilder","streams$","stream$","value","sort","a","b","event_id","observable","forEach","pipe","combineLatest","stream","bs$","BehaviorSubject","Event","get","CardSprite","gl","translationLocation","scaleLocation","rotationLocation","selectedLocation","isSpaceLocation","visibleLocation","texCoordLocation","frontTexCoordBuffer","backTexCoordBuffer","positionBuffer","program","texture","selected","x1","x2","CARD_WIDTH","y1","positions","CARD_HEIGHT","textures","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","vertexShader","fragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","positionAttributeLocation","getAttribLocation","resolutionUniformLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","useProgram","enableVertexAttribArray","uniform2f","canvas","type","FLOAT","vertexAttribPointer","x0","IMAGE_MARGIN","y0","Promise","resolve","reject","loadedCardImages","emissions","cardData","image","Image","src","onload","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_LINEAR","generateMipmap","set","sprite","uniform2fv","uniform1f","uniform1i","drawArrays","TRIANGLES","deleteBuffer","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","Map","cardSprites","Canvas","getContext","ratio","window","devicePixelRatio","innerWidth","viewport","addEventListener","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","prepareTextures","clearColor","clear","COLOR_BUFFER_BIT","s","render","Mouse","original_mouse_position","mouse_position","vec2","create","copy","card_position","fromValues","origin","rotate","subtract","rect","getRectangle","mousePosition","intersects","has","Menu","props","getRoomID","roomIDInput","document","getElementById","className","alt","placeholder","onClick","roomID","createGame","joinGame","StatusBar","status","leaveGame","DebugConsole","serverEvents$","commands$","showGameState","fromEvents","getGameStateGenerationTime","t0","performance","App","events$","socket","timeout","handledServerEventIDs","setupCommands","currentPage","notification","showNotification","serverUrl","location","hostname","console","log","WebSocket","onopen","e","notify","onmessage","JSON","parse","data","addCommand","setState","next","addServerEvents","onclose","setTimeout","connect","newEvents","command","getGameState","focusedCard","getFocusedCard","sendCommand","context","send","stringify","msg","shouldTimeOut","clearTimeout","subscribe","canvasElem","onmousemove","elem","target","getBoundingClientRect","clientX","left","clientY","top","result","onMoved","onclick","prepare","then","setInterval","statusBar","notificationMsg","style","display","bind","Component","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.18a94abf.chunk.js","sourcesContent":["export const WIDTH = 960\nexport const HEIGHT = 540\nexport const ANIMATION_DURATION_MS = 200\nexport const HAND_POSITION = [482, HEIGHT+50]\nexport const OPPONENT_HAND_POSITION = [482, -50]\nexport const HAND_CARD_ANGLE = Math.PI/5\nexport const HAND_X_RADIUS = 160\nexport const HAND_Y_RADIUS = 80\nexport const HAND_ANGLE_FACTOR = HAND_Y_RADIUS / HAND_X_RADIUS // The angle should not map to the same ellipse as the position\nexport const EMISSIONS_LINE_POSITION = [482, HEIGHT/2]\nexport const EMISSIONS_LINE_MAX_LENGTH = 450\nexport const DECK_POSITION = [WIDTH-100, HEIGHT/2-154/2-20]\nexport const DISCARD_PILE_POSITION = [WIDTH-100, HEIGHT/2+154/2+20]\n","import { ANIMATION_DURATION_MS } from './constants'\n\nexport class Card {\n  static DEFAULT_WIDTH = 445\n  static DEFAULT_HEIGHT = 656\n  static DEFAULT_SCALE = 0.275\n\n  id: number\n  name: string\n  container: string\n  position: number[] = [0, 0]\n  scale: number = Card.DEFAULT_SCALE\n  rotation: number = 0\n  addedRotation: number = 0\n  zLevel: number = 0\n  isSpace: boolean = false\n  visible: boolean = true\n  flipped: boolean = false\n\n  constructor(\n    id: number,\n    name: string,\n    container: \"hand\" | \"opponent-hand\" | \"emissions-line\" | \"deck\"\n  ) {\n    this.id = id\n    this.name = name\n    if (name === \"space\") this.isSpace = true\n    this.container = container\n  }\n\n  static getRectangle(card: Card): number[][] {\n    const width = Card.DEFAULT_WIDTH*card.scale\n    const height = Card.DEFAULT_HEIGHT*card.scale\n\n    return [\n      [-width/2, -height/2],\n      [width/2, height/2]\n    ]\n  }\n\n  static transpose(\n    card: Card,\n    goal: TransposeGoal,\n    timePassed: number\n  ): Card {\n    const newCard = { ...card }\n\n    if (goal.position !== undefined) {\n      newCard.position = [\n        transpose(card.position[0], goal.position[0], timePassed),\n        transpose(card.position[1], goal.position[1], timePassed)\n      ]\n    }\n\n    if (goal.rotation !== undefined) {\n      newCard.rotation = transpose(card.rotation, goal.rotation, timePassed)\n    }\n\n    if (goal.addedRotation !== undefined) {\n      newCard.addedRotation = transpose(card.addedRotation, goal.addedRotation, timePassed)\n    }\n    \n    if (goal.scale !== undefined) {\n      newCard.scale = transpose(card.scale, goal.scale, timePassed)\n    }\n\n    return newCard\n  }\n}\n\nexport interface TransposeGoal {\n  position?: number[]\n  rotation?: number\n  addedRotation?: number\n  scale?: number\n}\n\nexport function transpose(from: number, to: number, timePassed: number) {\n  if (timePassed > ANIMATION_DURATION_MS) return to\n\n  const fraction = timePassed/ANIMATION_DURATION_MS\n  const mult = 1 - (1 - fraction) ** 2 // easeOutQuad easing function\n  return from + (to - from)*mult\n}\n\nexport class SpaceCard extends Card {\n  constructor(id: number) {\n    super(id, \"space\", \"emissions-line\")\n  }\n}\n","import { GameState } from './gamestate'\nimport { Card, TransposeGoal } from './card'\nimport {\n  HAND_POSITION,\n  OPPONENT_HAND_POSITION,\n  HAND_CARD_ANGLE,\n  HAND_X_RADIUS,\n  HAND_Y_RADIUS,\n  HAND_ANGLE_FACTOR\n} from './constants'\n\nexport class Hand {\n  static rearrange(\n    state: GameState,\n    timePassed: number\n  ): GameState {\n    let i = 0\n    const n = state.cards.filter(c => c.container === \"hand\").length - 1\n    state.cards = state.cards.map((card: Card) => {\n      if (card.container !== \"hand\") return card\n\n      let angle = HAND_CARD_ANGLE * (i - n/2)\n      let x = HAND_POSITION[0] + HAND_X_RADIUS * Math.sin(angle)\n      let y = HAND_POSITION[1] - HAND_Y_RADIUS * Math.cos(angle)\n      let scale = Card.DEFAULT_SCALE\n\n      // + 10 to prevent first card going under emissions line card when zooming out\n      card.zLevel = i + 10 \n\n      const focusedCardID = GameState.getFocusedCardID(state)\n      if (focusedCardID === card.id) {\n        y = HAND_POSITION[1] - 230\n        scale = Card.DEFAULT_SCALE * 2\n        angle = 0\n        card.zLevel = 999\n      }\n\n      const goal: TransposeGoal = {\n        position: [x,y],\n        rotation: angle * HAND_ANGLE_FACTOR,\n        scale: scale\n      }\n      i += 1\n      return Card.transpose(card, goal, timePassed)\n    })\n\n    return state\n  }\n}\n\nexport class OpponentHand {\n  static rearrange(\n    state: GameState,\n    timePassed: number\n  ): GameState {\n    let i = 0\n    const n = state.cards.filter(c => c.container === \"opponent-hand\").length - 1\n    state.cards = state.cards.map((card: Card) => {\n      if (card.container !== \"opponent-hand\") return card\n\n      const angle = HAND_CARD_ANGLE * (i - n/2) + Math.PI\n      const x = OPPONENT_HAND_POSITION[0] + HAND_X_RADIUS * Math.sin(angle)\n      const y = OPPONENT_HAND_POSITION[1] - HAND_Y_RADIUS * Math.cos(angle)\n\n      const goal: TransposeGoal = {\n        position: [x,y],\n        rotation: (angle + Math.PI) * HAND_ANGLE_FACTOR\n      }\n      i += 1\n      return Card.transpose(card, goal, timePassed)\n    })\n\n    return state\n  }\n}\n","import { GameState } from './gamestate'\nimport { Card, SpaceCard, TransposeGoal } from './card'\nimport {\n  EMISSIONS_LINE_POSITION,\n  EMISSIONS_LINE_MAX_LENGTH\n} from './constants'\n\nexport class EmissionsLine {\n  static rearrange(\n    state: GameState,\n    timePassed: number\n  ): GameState {\n    state = {...state}\n\n    let elCards = state.emissionsLineCardOrder\n      .reduce((cards: Card[], cardID: number) => {\n        const card = state.cards.find(c => c.id === cardID)\n        if (!card) throw new Error(\"Can't find card with ID: \" + cardID)\n        return [...cards, card]\n      }, [])\n    const cardCount = elCards.length\n    const cardWidth = Card.DEFAULT_WIDTH * Card.DEFAULT_SCALE\n    const totalELWidth = cardWidth * cardCount\n    let width = cardWidth / 2\n    if (totalELWidth > EMISSIONS_LINE_MAX_LENGTH) {\n      width = (EMISSIONS_LINE_MAX_LENGTH - cardWidth) / (cardCount-1)\n    }\n    const startOffset = 0 - width*cardCount/2 - width/2\n\n    elCards = elCards.map((card: Card, i: number) => {\n      const goal: TransposeGoal = {}\n\n      goal.scale = Card.DEFAULT_SCALE\n      goal.position = [\n        EMISSIONS_LINE_POSITION[0] + startOffset + width * (i+1),\n        EMISSIONS_LINE_POSITION[1]\n      ]\n\n      card.zLevel = i\n      card.visible = true\n      if (card.isSpace) {\n        if (state.selectedCardID === undefined) card.visible = false\n\n        card.name = \"space\"\n        const selectedCard = state.cards.find(c => c.id === state.selectedCardID)\n        if (selectedCard !== undefined && GameState.getFocusedCardID(state) === card.id) {\n          card.name = selectedCard.name\n        }\n      } else {\n        if (state.selectedCardID !== undefined && GameState.getFocusedCardID(state) === card.id) {\n          goal.scale = Card.DEFAULT_SCALE * 2\n          card.zLevel = 999\n        }\n      }\n\n      return Card.transpose(card, goal, timePassed)\n    })\n\n    return GameState.updateCards(state, elCards)\n  }\n\n  static add(state: GameState, card: Card, position: number = 0): GameState {\n    state = {...state}\n\n    // Flip card\n    card.flipped = true\n\n    // Add new card in specified position\n    state.cards.push(card)\n    state.emissionsLineCardOrder = [\n      ...state.emissionsLineCardOrder.slice(0, position+1),\n      card.id,\n      ...state.emissionsLineCardOrder.slice(position+1, state.emissionsLineCardOrder.length)\n    ]\n\n    // Reset space cards\n    state.emissionsLineCardOrder = state.emissionsLineCardOrder\n      .filter(cardID => cardID >= 0)\n      .reduce((elCardOrder, cardID, i) => {\n        return [\n          ...elCardOrder,\n          ...[cardID, -1-(i+1)]\n        ]\n      }, [-1])\n\n    state.cards = state.cards.filter(c => !c.isSpace)\n    const missingSpaceCards = state.emissionsLineCardOrder\n      .filter(cardID => cardID < 0)\n      .reduce((spaceCards: Card[], cardID: number, i: number) => {\n        const exists = state.cards.findIndex(c => c.id === cardID) > -1\n\n        if (exists) return spaceCards\n\n        return [\n          ...spaceCards,\n          new SpaceCard(-1-i)\n        ]\n      }, [])\n    state.cards = [...state.cards, ...missingSpaceCards]\n\n    return state\n  }\n}\n","import { Card, TransposeGoal } from './card'\nimport { Hand, OpponentHand } from './hand'\nimport { EmissionsLine } from './emissions-line'\nimport { Event } from './event'\nimport {\n  DISCARD_PILE_POSITION,\n  DECK_POSITION\n} from './constants'\n\nexport interface ServerCommand {\n  context: string\n  type: string\n  payload: any\n}\n\nexport class GameState {\n  // Every Card has a parameter for whatever container it is in, instead of\n  // containers being actual arrays\n  cards: Card[] = []\n  emissionsLineCardOrder: number[] = []\n  isMyTurn: boolean = false\n  socketID: number = -1\n  hoveredCardIDs = new Set<number>()\n  selectedCardID?: number\n  statusMessage: string = \"\"\n\n  static getFocusedCardID(state: GameState): number | undefined {\n    return Array.from(state.hoveredCardIDs)[0]\n  }\n\n  static getFocusedCard(state: GameState): Card | undefined {\n    const id = GameState.getFocusedCardID(state)\n    return state.cards.find(c => c.id === id)\n  }\n\n\n  static getSelectedCard(state: GameState): Card | undefined {\n    return state.cards.find(c => c.id === state.selectedCardID)\n  }\n\n  static mouseClicked(state: GameState, event: Event, timePassed: number): GameState {\n    const focusedCardID = GameState.getFocusedCardID(state)\n    if (focusedCardID === undefined) {\n      state.selectedCardID = undefined\n    } else {\n      const card = state.cards.find(c => c.id === focusedCardID)\n\n      if (card && card.container === \"hand\") {\n        state.selectedCardID = focusedCardID\n      }\n    }\n    state = EmissionsLine.rearrange(state, timePassed)\n\n    return {\n      ...state\n    }\n  }\n\n  static nextCard(state: GameState, event: Event, timePassed: number): GameState {\n    // remove existing deck card\n    const cards = state.cards.filter(c => c.container !== \"deck\")\n\n    const serverCard = event.payload.card\n    const card = new Card(serverCard.id, serverCard.name, \"deck\")\n    card.position = DECK_POSITION\n\n    cards.push(card)\n\n    return {\n      ...state,\n      cards: cards\n    }\n  }\n\n  static incorrectCardPlacement(state: GameState, event: Event, timePassed: number): GameState {\n    state =  { ...state }\n\n    const goal: TransposeGoal = {\n      position: DISCARD_PILE_POSITION,\n      rotation: 0,\n      addedRotation: 0\n    }\n\n    state.cards = state.cards.map(card => {\n      if (card.id !== event.payload.cardID) return card;\n\n      card.flipped = true\n\n      return Card.transpose({\n        ...card,\n        container: \"discard-pile\"\n      }, goal, timePassed)\n    })\n\n    state.selectedCardID = undefined\n\n    state = Hand.rearrange(state, timePassed)\n    state = OpponentHand.rearrange(state, timePassed)\n\n    return state\n  }\n\n  static updateCards(state: GameState, updated: Card[]): GameState {\n    state.cards = state.cards.map(card => {\n      const updatedCard = updated.find(c => c.id === card.id)\n\n      return updatedCard ? updatedCard : card\n    })\n\n    return state\n  }\n\n  static fromEvents(events: Event[], currentTime: number = Date.now()): GameState {\n    return events.reduce((state: GameState, event: Event) => {\n      const timePassed = currentTime - event.timestamp\n      switch(event.event_type) {\n        case \"waiting_for_players\":\n          // No payload\n          state.statusMessage = \"Väntar på spelare #2\"\n          break\n        case \"playing\":\n          // No payload\n          /*\n          const sc = new SpaceCard(state)\n          state.cards.push(sc)\n          state.emissionsLineCardOrder.push(sc.id)\n          */\n          break\n        case \"draw_card\": {\n          // { socketID, card }\n          // Draw card into correct hand\n          const server_card = event.payload.card\n\n          if (event.payload.socketID === state.socketID) {\n            const card = new Card(server_card.id, server_card.name, \"hand\")\n            card.position = DECK_POSITION\n            state.cards.push(card)\n            state = Hand.rearrange(state, timePassed)\n          } else {\n            const card = new Card(server_card.id, server_card.name, \"opponent-hand\")\n            card.position = DECK_POSITION\n            state.cards.push(card)\n            state = OpponentHand.rearrange(state, timePassed)\n          }\n\n          break\n        }\n        case \"return_opponent_hand\":\n          // No payload\n          break\n        case \"card_played_from_deck\": {\n          // { card, position }\n          const serverCard = event.payload.card\n          const position = event.payload.position\n          state = EmissionsLine.add(\n            state,\n            new Card(serverCard.id, serverCard.name, \"emissions-line\"),\n            position)\n          state = EmissionsLine.rearrange(state, timePassed)\n          break\n        }\n        case \"card_played_from_hand\":\n          // { socketID, cardID, position }\n          // Move card to emissions line\n          const playedCard = state.cards.find(c => c.id === event.payload.cardID)\n          const position = event.payload.position\n          if (!playedCard) {\n            throw new Error(\"Played card does not exist with ID: \" + event.payload.cardID)\n          }\n          state.selectedCardID = undefined\n          const movedCard = new Card(playedCard.id, playedCard.name, \"emissions-line\")\n          movedCard.position = playedCard.position\n          state.cards = state.cards.filter(c => c !== playedCard)\n          state = EmissionsLine.add(state, movedCard, position)\n          state = EmissionsLine.rearrange(state, timePassed)\n          state = Hand.rearrange(state, timePassed)\n          state = OpponentHand.rearrange(state, timePassed)\n\n          /*\n          const spaceCard = new SpaceCard(state)\n          let i = 0;\n          state.cards = state.cards.reduce((cards: Card[], card: Card) => {\n            if (c.container != \"emissions-line\") return [...cards, c];\n\n            if (i === position) {\n              i += 1\n              return [...cards, c, movedCard, spaceCard]\n            }\n\n            i += 1\n            return [...cards, c];\n          }, [])\n          */\n\n          break\n        case \"incorrect_card_placement\": {\n          // { cardID, socketID }\n          state = GameState.incorrectCardPlacement(state, event, timePassed)\n          break\n        }\n        case \"player_turn\":\n          // { socketID }\n          if (state.socketID === event.payload.socketID) {\n            state.isMyTurn = true\n            state.statusMessage = \"Din tur\"\n          } else {\n            state.isMyTurn = false\n            state.statusMessage = \"Andra spelarens tur\"\n          }\n          break\n        case \"game_won\":\n          // { socketID }\n          if (state.socketID === event.payload.socketID) {\n            state.statusMessage = \"Du vann!\"\n          } else {\n            state.statusMessage = \"Du förlorade!\"\n          }\n          break\n        case \"vote_new_game\":\n          // { socketID }\n          break\n        case \"next_card\":\n          // { card }\n          state = GameState.nextCard(state, event, timePassed)\n          break\n        case \"card_hovered\": {\n          const card_id = event.payload.card_id\n          state.hoveredCardIDs.add(card_id)\n          state = Hand.rearrange(state, timePassed)\n          state = EmissionsLine.rearrange(state, timePassed)\n          break\n        }\n        case \"card_unhovered\": {\n          const card_id = event.payload.card_id\n          state.hoveredCardIDs.delete(card_id)\n          state = Hand.rearrange(state, timePassed)\n          state = EmissionsLine.rearrange(state, timePassed)\n          break\n        }\n        case \"mouse_clicked\": {\n          state = GameState.mouseClicked(state, event, timePassed)\n          break\n        }\n        case \"socket_id\": {\n          state.socketID = event.payload.socketID\n          break\n        }\n      }\n\n      return state\n    }, new GameState())\n  }\n}\n","import { Observable, BehaviorSubject } from 'rxjs'\nimport { map, combineLatest } from 'rxjs/operators'\n\nexport interface ServerEvent {\n  event_id: number\n  event_type: string\n  payload: any\n}\n\nexport class EventBuilder {\n  streams$: BehaviorSubject<Event[]>[]\n\n  constructor(\n    streams$: BehaviorSubject<Event[]>[]\n  ) {\n    this.streams$ = streams$\n  }\n\n  get(): Event[] {\n    return this.streams$\n      .reduce((events: Event[], stream$: BehaviorSubject<Event[]>) => {\n        return [\n          ...events,\n          ...stream$.value\n        ]\n      }, [])\n      .sort((a: Event, b: Event) => (a.event_id || 0) - (b.event_id || 0))\n      .sort((a: Event, b: Event) => a.timestamp - b.timestamp)\n      .map((event: Event, i: number) => {\n        return {\n          ...event,\n          event_id: i\n        }\n      })\n  }\n\n  observable(): Observable<Event[]> {\n    let observable: Observable<Event[]> = this.streams$[0]\n    \n    // Merge all streams\n    this.streams$\n      .slice(1, this.streams$.length)\n      .forEach(stream$ => {\n        observable = observable.pipe(\n          combineLatest(stream$),\n          map(stream => stream.reduce((events, stream) => [...events, ...stream], []))\n        )\n      })\n\n    // Use .get() to avoid duplicate code\n    return observable.pipe(map((events: Event[]) => {\n      const bs$ = new BehaviorSubject(events)\n      let builder = Event\n        .from([bs$])\n\n      return builder.get()\n    }))\n  }\n}\n\nexport class Event {\n  event_id?: number\n  event_type: string\n  payload: any\n  timestamp: number\n\n  constructor(\n    event_id: number,\n    event_type: string,\n    payload: any,\n    timestamp: number\n  ) {\n    this.event_id = event_id\n    this.event_type = event_type\n    this.payload = payload\n    this.timestamp = timestamp\n  }\n\n  static from(\n    streams$: BehaviorSubject<Event[]>[]\n  ): EventBuilder {\n    return new EventBuilder(streams$)\n  }\n}\n","export interface CardData {\n  id: number\n  name: string\n  emissions: number\n}\n\nexport const cards: CardData[] = [\n\t{\n\t\t\"name\": \"aggmackor\",\n\t\t\"emissions\": 120\n\t},\n\t{\n\t\t\"name\": \"bilresa-stockholm-are\",\n\t\t\"emissions\": 50\n\t},\n\t{\n\t\t\"name\": \"bilresa-stockholm-goteborg\",\n\t\t\"emissions\": 80\n\t},\n\t{\n\t\t\"name\": \"bilresor-genomsnitt\",\n\t\t\"emissions\": 1400\n\t},\n\t{\n\t\t\"name\": \"blandkost-genomsnitt\",\n\t\t\"emissions\": 2000\n\t},\n\t{\n\t\t\"name\": \"blandkost-kor\",\n\t\t\"emissions\": 4500\n\t},\n\t{\n\t\t\"name\": \"blandkost-kyckling\",\n\t\t\"emissions\": 1000\n\t},\n\t{\n\t\t\"name\": \"bussresa-malmo-chamonix\",\n\t\t\"emissions\": 60\n\t},\n\t{\n\t\t\"name\": \"dator-paslagen\",\n\t\t\"emissions\": 110\n\t},\n\t{\n\t\t\"name\": \"duscha-5min\",\n\t\t\"emissions\": 30\n\t},\n\t{\n\t\t\"name\": \"duscha-10min\",\n\t\t\"emissions\": 120\n\t},\n\t{\n\t\t\"name\": \"duscha-15min\",\n\t\t\"emissions\": 500\n\t},\n\t{\n\t\t\"name\": \"flaskkarre\",\n\t\t\"emissions\": 400\n\t},\n\t{\n\t\t\"name\": \"flygresa-malmo-chamonix\",\n\t\t\"emissions\": 300\n\t},\n\t{\n\t\t\"name\": \"flygresa-stockholm-are\",\n\t\t\"emissions\": 300\n\t},\n\t{\n\t\t\"name\": \"flygresa-stockholm-goteborg\",\n\t\t\"emissions\": 250\n\t},\n\t{\n\t\t\"name\": \"flygresa-sverige-bangkok\",\n\t\t\"emissions\": 1600\n\t},\n\t{\n\t\t\"name\": \"flygresa-sverige-newyork\",\n\t\t\"emissions\": 1200\n\t},\n\t{\n\t\t\"name\": \"flygresor-genomsnitt\",\n\t\t\"emissions\": 650\n\t},\n\t{\n\t\t\"name\": \"grasklippning-bensindriven\",\n\t\t\"emissions\": 60\n\t},\n\t{\n\t\t\"name\": \"grot\",\n\t\t\"emissions\": 60\n\t},\n\t{\n\t\t\"name\": \"halloumiburgare\",\n\t\t\"emissions\": 350\n\t},\n\t{\n\t\t\"name\": \"handdiska\",\n\t\t\"emissions\": 20\n\t},\n\t{\n\t\t\"name\": \"hund\",\n\t\t\"emissions\": 50\n\t},\n\t{\n\t\t\"name\": \"kycklingben\",\n\t\t\"emissions\": 200\n\t},\n\t{\n\t\t\"name\": \"laderskor\",\n\t\t\"emissions\": 160\n\t},\n\t{\n\t\t\"name\": \"ny-dator\",\n\t\t\"emissions\": 350\n\t},\n\t{\n\t\t\"name\": \"ny-telefon\",\n\t\t\"emissions\": 50\n\t},\n\t{\n\t\t\"name\": \"nytt-kok\",\n\t\t\"emissions\": 2400\n\t},\n\t{\n\t\t\"name\": \"ostmackor\",\n\t\t\"emissions\": 250\n\t},\n\t{\n\t\t\"name\": \"paketfrakt-flyg-kina\",\n\t\t\"emissions\": 250\n\t},\n\t{\n\t\t\"name\": \"paketfrakt-lastbil-tyskland\",\n\t\t\"emissions\": 10\n\t},\n\t{\n\t\t\"name\": \"pendla-biodieselbil\",\n\t\t\"emissions\": 4000\n\t},\n\t{\n\t\t\"name\": \"pendla-buss\",\n\t\t\"emissions\": 200\n\t},\n\t{\n\t\t\"name\": \"pendla-cykel\",\n\t\t\"emissions\": 10\n\t},\n\t{\n\t\t\"name\": \"pendla-elbil\",\n\t\t\"emissions\": 550\n\t},\n\t{\n\t\t\"name\": \"pendla-liten-dieselbil\",\n\t\t\"emissions\": 2200\n\t},\n\t{\n\t\t\"name\": \"pendla-stor-dieselbil\",\n\t\t\"emissions\": 2700\n\t},\n\t{\n\t\t\"name\": \"rida\",\n\t\t\"emissions\": 250\n\t},\n\t{\n\t\t\"name\": \"rosor-holland\",\n\t\t\"emissions\": 350\n\t},\n\t{\n\t\t\"name\": \"rosor-kenya\",\n\t\t\"emissions\": 50\n\t},\n\t{\n\t\t\"name\": \"sockerartor-holland\",\n\t\t\"emissions\": 10\n\t},\n\t{\n\t\t\"name\": \"sockerartor-kenya\",\n\t\t\"emissions\": 100\n\t},\n\t{\n\t\t\"name\": \"tagresa-stockholm-goteborg\",\n\t\t\"emissions\": 10\n\t},\n\t{\n\t\t\"name\": \"tbenstek\",\n\t\t\"emissions\": 3000\n\t},\n\t{\n\t\t\"name\": \"tv\",\n\t\t\"emissions\": 60\n\t},\n\t{\n\t\t\"name\": \"uppvarmning-bergvarme\",\n\t\t\"emissions\": 600\n\t},\n\t{\n\t\t\"name\": \"uppvarmning-el\",\n\t\t\"emissions\": 1800\n\t},\n\t{\n\t\t\"name\": \"uppvarmning-fjarrvarme\",\n\t\t\"emissions\": 1200\n\t},\n\t{\n\t\t\"name\": \"uppvarmning-lagenhet\",\n\t\t\"emissions\": 700\n\t},\n\t{\n\t\t\"name\": \"vegan\",\n\t\t\"emissions\": 500\n\t},\n\t{\n\t\t\"name\": \"vegetarian\",\n\t\t\"emissions\": 900\n\t},\n\t{\n\t\t\"name\": \"vegofarssas\",\n\t\t\"emissions\": 100\n\t},\n\t{\n\t\t\"name\": \"yoghurt\",\n\t\t\"emissions\": 200\n\t}\n].map((c: any, i: number) => {\n  return {\n    ...c,\n    id: i\n  }\n})\n","import vsSource from './shader.vert'\nimport fsSource from './shader.frag'\nimport { cards, CardData } from '../cards'\nimport { Card } from '../game/card'\n\nconst IMAGE_WIDTH = 906/2\nconst IMAGE_HEIGHT = 1328/2\nconst IMAGE_MARGIN = 16/2\nconst TEXTURE_WIDTH = 2048/2\nconst TEXTURE_HEIGHT = 2048/2\n\nconst CARD_WIDTH = IMAGE_WIDTH - IMAGE_MARGIN\nconst CARD_HEIGHT = IMAGE_HEIGHT - IMAGE_MARGIN\n\nexport class CardSprite {\n  card: Card\n  gl: WebGLRenderingContext\n  translationLocation: WebGLUniformLocation | null\n  scaleLocation: WebGLUniformLocation | null\n  rotationLocation: WebGLUniformLocation | null\n  selectedLocation: WebGLUniformLocation | null\n  isSpaceLocation: WebGLUniformLocation | null\n  visibleLocation: WebGLUniformLocation | null\n  texCoordLocation: number = 0\n  frontTexCoordBuffer: WebGLBuffer | null\n  backTexCoordBuffer: WebGLBuffer | null\n  positionBuffer: WebGLBuffer | null\n  program: WebGLProgram\n  texture: WebGLTexture\n  selected: boolean = false\n  static textures = new Map<string, WebGLTexture>()\n\n  constructor(gl: WebGLRenderingContext, card: Card) {\n    this.card = card\n    this.gl = gl\n\n    const x1 = -CARD_WIDTH/2\n    const x2 = CARD_WIDTH/2\n    const y1 = -CARD_HEIGHT/2\n    const y2 = CARD_HEIGHT/2\n\n    const positions = [\n      x1, y1,\n      x2, y1,\n      x1, y2,\n      x1, y2,\n      x2, y1,\n      x2, y2,\n    ]    \n    const texture = CardSprite.textures.get(card.name)\n    if (!texture) {\n      throw new Error(\"No card texture exists with name '\" + card.name + \"'\")\n    }\n\n    const vs = createShader(gl, gl.VERTEX_SHADER, vsSource)\n    const fs = createShader(gl, gl.FRAGMENT_SHADER, fsSource)\n    const program = createProgram(gl, vs, fs)\n\n    const positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\n    const resolutionUniformLocation = gl.getUniformLocation(program, \"u_resolution\")\n    const translationLocation = gl.getUniformLocation(program, \"u_translation\")\n    const scaleLocation = gl.getUniformLocation(program, \"u_scale\")\n    const rotationLocation = gl.getUniformLocation(program, \"u_rotation\")\n    const texCoordLocation = gl.getAttribLocation(program, \"a_texcoord\")\n    const selectedLocation = gl.getUniformLocation(program, \"u_selected\")\n    const isSpaceLocation = gl.getUniformLocation(program, \"u_isspace\")\n    const visibleLocation = gl.getUniformLocation(program, \"u_visible\")\n\n    const positionBuffer = gl.createBuffer()\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n\n    gl.useProgram(program)\n    gl.enableVertexAttribArray(positionAttributeLocation)\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height)\n\n    const size = 2\n    const type = gl.FLOAT\n    const normalize = false\n    const stride = 0\n    const offset = 0\n    gl.vertexAttribPointer(\n      positionAttributeLocation, size, type, normalize, stride, offset)\n\n    const backTexCoordBuffer = gl.createBuffer();\n    (() => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, backTexCoordBuffer)\n      const x0 = IMAGE_MARGIN / TEXTURE_WIDTH\n      const y0 = IMAGE_MARGIN / TEXTURE_HEIGHT\n      const x = CARD_WIDTH / TEXTURE_WIDTH\n      const y = CARD_HEIGHT / TEXTURE_HEIGHT\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n          x0,  y0,\n          x,  y0,\n          x0,  y,\n          x0,  y,\n          x,  y0,\n          x,  y\n      ]), gl.STATIC_DRAW)\n    })()\n\n    gl.enableVertexAttribArray(texCoordLocation)\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0)\n\n    const frontTexCoordBuffer = gl.createBuffer();\n    (() => {\n      gl.bindBuffer(gl.ARRAY_BUFFER, frontTexCoordBuffer)\n      const x0 = IMAGE_MARGIN * 2 / TEXTURE_WIDTH + CARD_WIDTH / TEXTURE_WIDTH\n      const y0 = IMAGE_MARGIN / TEXTURE_HEIGHT\n      const x = CARD_WIDTH / TEXTURE_WIDTH * 2\n      const y = CARD_HEIGHT / TEXTURE_HEIGHT\n      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n          x0,  y0,\n          x,  y0,\n          x0,  y,\n          x0,  y,\n          x,  y0,\n          x,  y\n      ]), gl.STATIC_DRAW)\n    })()\n\n    gl.uniform2f(resolutionUniformLocation, gl.canvas.width, gl.canvas.height)\n\n    this.program = program\n    this.translationLocation = translationLocation\n    this.scaleLocation = scaleLocation\n    this.rotationLocation = rotationLocation\n    this.selectedLocation = selectedLocation\n    this.isSpaceLocation = isSpaceLocation\n    this.visibleLocation = visibleLocation\n    this.texCoordLocation = texCoordLocation\n    this.texture = texture\n    this.backTexCoordBuffer = backTexCoordBuffer\n    this.frontTexCoordBuffer = frontTexCoordBuffer\n    this.positionBuffer = positionBuffer\n  }\n\n  static prepareTextures(gl: WebGLRenderingContext): Promise<null> {\n    return new Promise((resolve, reject) => {\n      let loadedCardImages = 0;\n      const cardsToLoad: CardData[] = [...cards, { id: -1, name: \"space\", emissions: 0 }]\n      cardsToLoad.forEach((cardData: CardData) => {\n        const image = new Image()\n        image.src = `cards/${cardData.name}-pair.small.png`\n        image.onload = () => {\n          // Create a texture.\n          const texture = gl.createTexture();\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n         \n          // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n          // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n          // gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR)\n          gl.generateMipmap(gl.TEXTURE_2D)\n\n          if (!texture) throw new Error(\"texture is null\")\n\n          CardSprite.textures.set(cardData.name, texture)\n          loadedCardImages++;\n          if (loadedCardImages === cards.length) {\n            resolve(null)\n          }\n        }\n      })\n    })\n  }\n\n  static render(sprite: CardSprite) {\n    const gl = sprite.gl\n    const translationLocation = sprite.translationLocation\n    const scaleLocation = sprite.scaleLocation\n    const rotationLocation = sprite.rotationLocation\n    const selectedLocation = sprite.selectedLocation\n    const isSpaceLocation = sprite.isSpaceLocation\n    const visibleLocation = sprite.visibleLocation\n    const texCoordLocation = sprite.texCoordLocation\n    const frontTexCoordBuffer = sprite.frontTexCoordBuffer\n    const backTexCoordBuffer = sprite.backTexCoordBuffer\n    const program = sprite.program\n\n    gl.useProgram(program)\n\n    if (sprite.card.flipped) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, frontTexCoordBuffer)\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, backTexCoordBuffer)\n    }\n    gl.enableVertexAttribArray(texCoordLocation)\n    gl.vertexAttribPointer(texCoordLocation, 2, gl.FLOAT, false, 0, 0)\n\n    if (!translationLocation) {\n      throw new Error(\"Could not find WebGL translation location\")\n    }\n    gl.uniform2fv(translationLocation, sprite.card.position)\n    gl.uniform1f(scaleLocation, sprite.card.scale)\n    gl.uniform1f(rotationLocation, sprite.card.rotation + sprite.card.addedRotation)\n    gl.uniform1i(selectedLocation, sprite.selected ? 1 : 0)\n    gl.uniform1i(isSpaceLocation, sprite.card.isSpace ? 1 : 0)\n    gl.uniform1i(visibleLocation, sprite.card.visible ? 1 : 0)\n    gl.bindTexture(gl.TEXTURE_2D, sprite.texture);\n    gl.drawArrays(gl.TRIANGLES, 0, 6)\n  }\n\n  static delete(sprite: CardSprite, gl: WebGLRenderingContext) {\n    gl.deleteBuffer(sprite.frontTexCoordBuffer)\n    gl.deleteBuffer(sprite.backTexCoordBuffer)\n    gl.deleteBuffer(sprite.positionBuffer)\n  }\n}\n\nexport function createShader(\n  gl: WebGLRenderingContext,\n  type: number,\n  source: string\n): WebGLShader {\n\n  const shader = gl.createShader(type)\n\n  if (!shader) throw new Error(\"Failed to create shader of type \" + type)\n\n  gl.shaderSource(shader, source)\n\n  gl.compileShader(shader)\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (!success) {\n    throw new Error(\"Could not compile shader:\\n\" + gl.getShaderInfoLog(shader))\n  }\n\n  return shader\n}\n\nexport function createProgram(\n  gl: WebGLRenderingContext,\n  vertexShader: WebGLShader,\n  fragmentShader: WebGLShader\n): WebGLProgram {\n\n  const program = gl.createProgram()\n\n  if (!program) throw new Error(\"Failed to create WebGL program\")\n\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n  if (!success) {\n    throw new Error(\"Could not create program:\\n\" + gl.getProgramInfoLog(program))\n  }\n\n  return program\n}\n","const shader = `\nattribute vec2 a_position;\nattribute vec2 a_texcoord;\n\nuniform vec2 u_resolution;\nuniform vec2 u_translation;\nuniform float u_scale;\nuniform float u_rotation;\nvarying vec2 v_texcoord;\n\nvoid main() {\n  mat2 rotation_matrix = mat2(\n    cos(u_rotation), -sin(u_rotation),\n    sin(u_rotation), cos(u_rotation)\n  );\n  vec2 position = a_position * rotation_matrix * vec2(u_scale) + u_translation;\n\n  vec2 zeroToOne = position / vec2(960.0, 540.0);\n\n  vec2 zeroToTwo = zeroToOne * 2.0;\n\n  vec2 clipSpace = zeroToTwo - 1.0;\n\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n\n  v_texcoord = a_texcoord;\n}\n`\n\nexport default shader\n","const shader = `\nprecision mediump float;\n\nuniform sampler2D u_texture;\nuniform bool u_selected;\nuniform bool u_isspace;\nuniform bool u_visible;\n\nvarying vec2 v_texcoord;\n\nvec2 CARD_SIZE = vec2(445, 656);\nvec2 TEXTURE_SIZE = vec2(1024, 1024);\n\nvoid main() {\n  if (u_visible == false)\n  {\n    gl_FragColor = vec4(0.0);\n    return;\n  }\n\n  vec2 texcoord = vec2(v_texcoord.x, v_texcoord.y) ;\n\n  vec4 color = texture2D(u_texture, v_texcoord);\n\n  vec2 uv = v_texcoord * TEXTURE_SIZE;\n\n  if (u_selected == true)\n  {\n    if (uv.x < 19.0 || uv.x > CARD_SIZE.x - 11.0 ||\n        uv.y < 19.0 || uv.y > CARD_SIZE.y - 11.0)\n    {\n      color = vec4(1.0, 0.0, 0.0, color.a);\n    }\n  }\n\n  if (u_isspace == true)\n  {\n    color.a = 0.5;\n  }\n\n  gl_FragColor = color;\n}\n`\n\nexport default shader\n","import { Card } from '../game/card'\nimport { CardSprite } from './card-sprite'\nimport { GameState } from '../game/gamestate'\n\nlet cardSprites: CardSprite[] = []\n\nexport class Canvas {\n  gl: WebGLRenderingContext\n\n  constructor(canvas: HTMLCanvasElement) {\n    const gl = canvas.getContext(\"webgl\")\n    if (!gl) throw new Error(\"gl is null\")\n    this.gl = gl\n\n    const ratio = window.devicePixelRatio; // Changes on browser/OS zoom\n    canvas.width = window.innerWidth * ratio;\n    canvas.height = window.innerWidth * 0.5625 * ratio; // 540 / 960 = 0.5625\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\n    window.addEventListener('resize', () => {\n      const ratio = window.devicePixelRatio; // Changes on browser/OS zoom\n      canvas.width = window.innerWidth * ratio;\n      canvas.height = window.innerWidth * 0.5625 * ratio; // 540 / 960 = 0.5625\n      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    }, false)\n\n    if (!gl) {\n      throw new Error(\"Failed to initialize WebGL\")\n    }\n\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\n    this.gl = gl\n  }\n\n  prepare(): Promise<null> {\n    return CardSprite.prepareTextures(this.gl)\n  }\n\n  render(state: GameState) {\n    const gl = this.gl\n\n    gl.clearColor(1, 1, 1, 1)\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    // Map new cards to card sprites\n    // TODO: Remove unused card sprites\n    state.cards\n      .forEach((card: Card) => {\n        let sprite = cardSprites.find((s: CardSprite) => s.card.id === card.id)\n\n        if (!sprite) {\n          sprite = new CardSprite(gl, card)\n          cardSprites.push(sprite)\n        } else {\n          // Update card data\n          sprite.card = card\n          const texture = CardSprite.textures.get(card.name)\n          if (!texture) throw new Error(\"Could not find texture with name '\" + card.name + \"'\")\n          sprite.selected = state.selectedCardID === sprite.card.id\n          sprite.texture = texture\n        }\n      })\n\n    // Remove card sprites that don't exist in gamestate\n    cardSprites\n      .filter(s => state.cards.find(c => c.id === s.card.id) === undefined)\n      .forEach((s: CardSprite) => {\n        CardSprite.delete(s, gl)        \n      })\n    cardSprites = cardSprites\n      .filter(s => state.cards.find(c => c.id === s.card.id))\n\n    cardSprites\n      .sort((a,b) => {\n        if (a.card.zLevel < b.card.zLevel) return -1;\n        if (a.card.zLevel > b.card.zLevel) return 1;\n        return 0;\n      })\n      .forEach((sprite: CardSprite) => {\n        CardSprite.render(sprite)\n      })   \n  }\n}\n","import { vec2 } from 'gl-matrix'\nimport { Card } from '../game/card'\nimport { Event } from '../game/event'\nimport { GameState } from './gamestate'\n\nexport class Mouse {\n  static intersects(card: Card, original_mouse_position: vec2): boolean {\n    // Copy values so that we don't overwrite them\n    let mouse_position: vec2 = vec2.create()\n    vec2.copy(mouse_position, original_mouse_position)\n    let card_position = vec2.fromValues(card.position[0], card.position[1])\n\n    // Get mouse coordinates relative to card rotation and position\n    const origin = vec2.fromValues(0, 0)\n    vec2.rotate(mouse_position, mouse_position, origin, -card.rotation)\n    vec2.rotate(card_position, card_position, origin, -card.rotation)\n    vec2.subtract(mouse_position, mouse_position, card_position)\n\n    // Check if mouse is within card width and height\n    const rect = Card.getRectangle(card)\n    if (\n      // within width\n      mouse_position[0] > rect[0][0] && mouse_position[0] < rect[1][0] &&\n      // within height\n      mouse_position[1] > rect[0][1] && mouse_position[1] < rect[1][1]\n    ) {\n      return true\n    }\n\n    return false\n  }\n  /*\n\n  static onClicked(\n    state: GameState,\n    mousePosition: vec2,\n    clientEvents: ClientEvent[],\n    currentTime: number\n  ): Command {\n    return GameState.newCommand(\n      state,\n      clientEvents,\n      currentTime,\n      \"mouse_clicked\",\n      {\n        x: mousePosition[0],\n        y: mousePosition[1]\n      })\n  }\n  */\n\n  // TODO: Unit test this\n  static onMoved(\n    state: GameState,\n    hoveredCardIDs: Set<number>,\n    mousePosition: vec2,\n    currentTime: number\n  ): {\n    events: Event[],\n    hoveredCardIDs: Set<number>\n  } {\n    let events: Event[] = []\n    state.cards.forEach((card: Card) => {\n      if (Mouse.intersects(card, mousePosition)) {\n        // If card not already hovered, add card_hovered event\n        if (!hoveredCardIDs.has(card.id)) {\n\n          // If hand card is selected, ignore non-space cards\n          if (state.selectedCardID) {\n            if (card.container === \"emissions-line\" && !card.isSpace) return\n          // Else, ignore space cards\n          } else {\n            if (card.container === \"emissions-line\" && card.isSpace) return\n          }\n\n          events.push({\n            event_type: \"card_hovered\",\n            payload: { card_id: card.id },\n            timestamp: currentTime\n          })\n        }\n\n        hoveredCardIDs.add(card.id)\n      } else {\n        // If card is hovered, add card_unhovered event\n        if (hoveredCardIDs.has(card.id)) {\n          events.push({\n            event_type: \"card_unhovered\",\n            payload: { card_id: card.id },\n            timestamp: currentTime\n          })\n        }\n\n        hoveredCardIDs.delete(card.id)\n      }\n    })\n\n    return {\n      events: events,\n      hoveredCardIDs: hoveredCardIDs\n    }\n  }\n}\n","import React from 'react'\n\ninterface Props {\n  createGame: (roomID: string) => void,\n  joinGame: (roomID: string) => void\n}\n\nexport function Menu(props: Props) {\n  const getRoomID = () => {\n    const roomIDInput = document.getElementById('roomID') as HTMLInputElement\n    if (!roomIDInput) throw new Error(\"Can't get roomID input\")\n    return roomIDInput.value\n  }\n\n  const createGame = () => {\n    const roomID = getRoomID()\n    props.createGame(roomID)\n  }\n  const joinGame = () => {\n    const roomID = getRoomID()\n    props.joinGame(roomID)\n  }\n\n  return (\n    <div className=\"menu\">\n      <img className=\"logo\" src=\"logo.webp\" alt=\"Klimatkoll logga\" />\n      <input id=\"roomID\" type=\"text\" placeholder=\"Spelets namn\" />\n      <button onClick={() => createGame()} className=\"pink\">\n        Skapa spel\n      </button>\n      <button onClick={() => joinGame()} className=\"yellow\">\n        Gå med i spel\n      </button>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport function StatusBar(props: {\n  status: string,\n  roomID: string | undefined,\n  leaveGame: () => void\n}) {\n  const statusMessage: string = props.status\n  const leaveGame = props.leaveGame\n  const roomID = props.roomID\n\n  return (\n    <div id=\"status-bar\">\n      <div className=\"room-id\">Rum: { roomID }</div>\n      <div className=\"status-bar-message\">\n        { statusMessage }\n      </div>\n      <button className=\"pink\" onClick={() => leaveGame()}>Lämna spel</button>\n    </div>\n  )\n}\n","import { BehaviorSubject } from 'rxjs'\nimport { GameState } from '../game/gamestate'\nimport { Event } from '../game/event'\n\nexport class DebugConsole {\n  // Sets up console commands for debugging purposes\n  static setupCommands(\n    serverEvents$: BehaviorSubject<Event[]>,\n    commands$: BehaviorSubject<Event[]>\n  ) {\n    (window as any).showGameState = () => {\n      const events = Event\n        .from([serverEvents$, commands$])\n        .get()\n      return GameState.fromEvents(events)\n    }\n\n    (window as any).getGameStateGenerationTime = () => {\n      const events = Event\n        .from([serverEvents$, commands$])\n        .get()\n      const t0 = performance.now()\n      GameState.fromEvents(events)\n      const t1 = performance.now()\n      return t1 - t0 \n    }\n  }\n}\n","import React, { Component } from 'react'\nimport { BehaviorSubject, Observable } from 'rxjs'\nimport { vec2 } from 'gl-matrix'\n\nimport { GameState, ServerCommand } from './game/gamestate'\nimport { Event, ServerEvent } from './game/event'\nimport { Canvas } from './canvas/canvas'\nimport { Mouse } from './game/mouse'\nimport { Menu } from './ui/Menu'\nimport { StatusBar } from './ui/StatusBar'\nimport { DebugConsole } from './devtools/console'\n\nclass App extends Component<{}, {\n  currentPage: string,\n  notification: string,\n  statusMessage: string,\n  showNotification: boolean,\n  roomID?: string,\n  canvasElem?: HTMLCanvasElement\n}> {\n  commands$: BehaviorSubject<Event[]> = new BehaviorSubject<Event[]>([])\n  serverEvents$: BehaviorSubject<Event[]> = new BehaviorSubject<Event[]>([])\n  streams$: BehaviorSubject<Event[]>[] = [this.commands$, this.serverEvents$]\n  events$?: Observable<Event[]>\n  events: Event[] = []\n  socket?: WebSocket\n  socketID?: number\n  timeout?: ReturnType<typeof setTimeout>\n  handledServerEventIDs: Set<number> = new Set<number>()\n  hoveredCardIDs: Set<number> = new Set<number>()\n\n  connect() {\n    // Initialise outside constructor to avoid reconnecting socket due to ReactJS stuff\n    let serverUrl = window.location.hostname\n    if (serverUrl === \"localhost\") {\n      serverUrl = serverUrl + \":4200\"\n    }\n    console.log(serverUrl)\n    const socket = new WebSocket('ws://' + serverUrl, 'echo-protocol')\n\n    socket.onopen = e => {\n      this.notify('Uppkopplad till servern')\n    }\n\n    socket.onmessage = (e: MessageEvent) => {\n      const event = JSON.parse(e.data)\n      console.log(event)\n      switch(event.type) {\n        case \"socketID\": {\n          this.socketID = event.payload\n          this.addCommand({\n            event_type: \"socket_id\",\n            payload: {\n              \"socketID\": this.socketID\n            },\n            timestamp: Date.now()\n          })\n          break\n        }\n        case \"room_joined\": {\n          const roomID = event.payload.roomID\n          this.setState({ roomID: roomID })\n          this.notify(\"Gick med i spel med ID: \" + roomID)\n          this.setState({ currentPage: 'game' })\n          break\n        }\n        case \"room_full\": {\n          // const roomID = event.payload\n          this.notify(\"Kan inte gå med i rum: Rummet är fullt\")\n          break\n        }\n        case \"room_exists\": {\n          this.notify(\"Kunde inte skapa rum: Rum med samma ID existerar redan\")\n          break\n        }\n        case \"room_left\": {\n          const socketID = event.payload.socketID\n          if (socketID === this.socketID) {\n            this.notify(\"Lämnade spelet\")\n          } else {\n            this.notify(\"Andra spelaren lämnade spelet\")\n          }\n\n          // Show menu\n          this.setState({ currentPage: \"menu\" })\n          // Reset game state\n          this.serverEvents$.next([])\n          this.commands$.next([])\n          this.handledServerEventIDs = new Set([])\n          // Re-add socket ID since it will not be sent again by server\n          this.addCommand({\n            event_type: \"socket_id\",\n            payload: {\n              \"socketID\": this.socketID\n            },\n            timestamp: Date.now()\n          })\n\n          break\n        }\n        case \"new_game\": {\n          // TODO: On new game => reset game events?\n          break\n        }\n        case \"events\": {\n          this.addServerEvents(event.payload)\n          break\n        }\n      }\n    }\n\n    socket.onclose = e => {\n      console.log('Socket closed')\n      this.notify('Tappade uppkoppling till servern. Försöker koppla upp igen.', false)\n      setTimeout(() => {\n        this.connect();\n      }, 1000);\n    };\n\n    this.socket = socket\n  }\n\n  getGameState() {\n    return GameState.fromEvents(this.events) \n  }\n\n  // This is required to keep track of when server events were received\n  addServerEvents(events: ServerEvent[]) {\n    const newEvents = events\n      .filter(event => !this.handledServerEventIDs.has(event.event_id))\n      .map(event => {\n        return {\n          ...event,\n          timestamp: Date.now()\n        }\n      })\n\n    events.forEach(event => {\n      this.handledServerEventIDs.add(event.event_id)\n    })\n\n    this.serverEvents$.next([\n      ...this.serverEvents$.value,\n      ...newEvents\n    ])\n  }\n\n  addCommand(command: Event) {\n    const state = this.getGameState()\n    switch(command.event_type) {\n      case \"mouse_clicked\": {\n        const focusedCard = GameState.getFocusedCard(state)\n        if (state.isMyTurn && state.selectedCardID && focusedCard && focusedCard.isSpace) {\n          const position = state.emissionsLineCardOrder.findIndex(cardID => focusedCard.id === cardID)\n          this.sendCommand({\n            context: \"game\",\n            type: \"card_played_from_hand\",\n            payload: {\n              cardID: state.selectedCardID,\n              position: position\n            }\n          })\n        }\n      }\n    }\n\n    this.commands$.next([\n      ...this.commands$.value,\n      {\n        ...command,\n        event_id: this.commands$.value.length\n      }\n    ])\n  }\n\n  constructor(props: {}) {\n    super(props)\n\n    DebugConsole.setupCommands(this.serverEvents$, this.commands$)\n\n    this.state = {\n      currentPage: 'menu',\n      notification: '',\n      showNotification: false,\n      statusMessage: ''\n    }\n  }\n\n  sendCommand(command: ServerCommand) {\n    if (this.socket) {\n      this.socket.send(JSON.stringify(command))\n    }\n  }\n\n  joinGame(roomID: string) {\n    this.sendCommand({\n      \"context\": \"menu\",\n      \"type\": \"join_game\",\n      \"payload\": {\n        \"roomID\": roomID\n      }\n    })\n  }\n\n  createGame(roomID: string) {\n    this.sendCommand({\n      \"context\": \"menu\",\n      \"type\": \"create_game\",\n      \"payload\": {\n        \"roomID\": roomID\n      }\n    })\n  }\n\n  leaveGame() {\n    this.sendCommand({\n      \"context\": \"room\",\n      \"type\": \"exit_game\",\n      \"payload\": {}\n    })\n  }\n\n  notify(msg: string, shouldTimeOut: boolean = true) {\n    this.setState({\n      notification: msg,\n      showNotification: true\n    })\n\n    if (shouldTimeOut === true) {\n      if (this.timeout) clearTimeout(this.timeout)\n      this.timeout = setTimeout(() => {\n        this.setState({ showNotification: false })\n      }, 1000)\n    }\n  }\n\n  componentDidMount() {\n    this.connect()\n    this.events$ = Event\n      .from([this.serverEvents$, this.commands$])\n      .observable()\n\n    this.events$.subscribe((events: Event[]) => {\n      const state = GameState.fromEvents(events)\n      this.setState({ statusMessage: state.statusMessage })\n    })\n\n    const canvasElem = document.getElementById(\"klimatkoll-canvas\") as HTMLCanvasElement\n    if (!canvasElem) throw new Error(\"Element with ID 'klimatkoll-canvas' not found\")\n    canvasElem.onmousemove = (e: MouseEvent) => {\n      const elem = e.target as HTMLElement\n      if (!elem) throw new Error(\"e.target is null\")\n      const rect = elem.getBoundingClientRect()\n      const mousePosition = vec2.fromValues(e.clientX - rect.left, e.clientY - rect.top)\n      const ratio = 960 / canvasElem.width\n      mousePosition[0] *= ratio;\n      mousePosition[1] *= ratio;\n      const state = this.getGameState()\n\n      const result = Mouse.onMoved(\n        state,\n        this.hoveredCardIDs,\n        mousePosition,\n        Date.now())\n\n      result.events.forEach(event => this.addCommand(event))\n      this.hoveredCardIDs = result.hoveredCardIDs\n    }\n    canvasElem.onclick = (e: MouseEvent) => {\n      const elem = e.target as HTMLElement\n      if (!elem) throw new Error(\"e.target is null\")\n      const rect = elem.getBoundingClientRect()\n      const mousePosition = vec2.fromValues(e.clientX - rect.left, e.clientY - rect.top)\n\n      this.addCommand({\n        event_type: \"mouse_clicked\",\n        payload: {\n          position: mousePosition\n        },\n        timestamp: Date.now()\n      })\n    }\n\n    this.setState({ canvasElem: canvasElem })\n\n    const canvas = new Canvas(canvasElem)\n    canvas.prepare().then(() => {\n      setInterval(() => {\n        this.events = Event\n          .from(this.streams$)\n          .get()\n        const state = this.getGameState()\n        canvas.render(state)\n      }, 1000/60)\n    })\n  }\n\n  render() {\n    const currentPage = this.state.currentPage\n    const notificationMsg = this.state.notification\n    const showNotification = this.state.showNotification\n    const statusMessage = this.state.statusMessage\n    const roomID = this.state.roomID\n\n    let statusBar: JSX.Element | undefined\n    if (currentPage === \"game\") {\n      statusBar = (\n        <StatusBar\n          roomID={roomID}\n          leaveGame={() => this.leaveGame()}\n          status={statusMessage} />\n      )\n    }\n\n    return (\n      <div id=\"app\">\n        <div className={'notification' + (showNotification ? ' show' : '')}>\n          { notificationMsg }\n        </div>\n        <div style={{ display: currentPage === \"menu\" ? \"block\" : \"none\", height: \"100%\" }}>\n          <Menu\n            joinGame={this.joinGame.bind(this)}\n            createGame={this.createGame.bind(this)} />\n        </div>\n        <canvas\n          style={{ display: currentPage === \"game\" ? \"block\" : \"none\" }}\n          id=\"klimatkoll-canvas\" />\n        { statusBar }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}